generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Users {
    id           Int     @id @default(autoincrement())
    firstName    String  @db.VarChar(25)
    lastName     String  @db.VarChar(100)
    email        String  @unique @db.VarChar(50)
    password     String  @db.VarChar(512)
    mobileNumber String? @db.VarChar(11)
    description  String? @db.VarChar(100)
    isOng        Boolean
    ongWebsite   String? @db.VarChar(100)
    cases        Cases[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Cases {
    id            Int          @id @default(autoincrement())
    user          Users        @relation(fields: [ownerId], references: [id])
    ownerId       Int
    contactMethod String       @db.VarChar(5)
    contactMail   String       @db.VarChar(50)
    contactPhone  String       @db.VarChar(11)
    description   String       @db.VarChar(500)
    isAdopted     Boolean
    isPaused      Boolean
    city          String       @db.VarChar(40)
    state         String       @db.VarChar(2)
    casePhotos    CasePhotos[]
    pets          Pets?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([ownerId])
}

model CasePhotos {
    id            Int     @id @default(autoincrement())
    case          Cases   @relation(fields: [caseId], references: [id])
    caseId        Int     @unique
    photoURL      String  @db.VarChar(300)
    isMainPicture Boolean

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([caseId])
}

model Pets {
    id              Int               @id @default(autoincrement())
    case            Cases             @relation(fields: [caseId], references: [id])
    caseId          Int               @unique
    name            String            @db.VarChar(40)
    gender          String            @db.Char(1)
    breed           String            @db.VarChar(50)
    isCastrated     Boolean
    type            String            @db.Char(1)
    age             Int
    description     String            @db.VarChar(100)
    treatments      Treatments[]
    appliedVaccines AppliedVaccines[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Treatments {
    id          Int      @id @default(autoincrement())
    pet         Pets     @relation(fields: [petId], references: [id])
    petId       Int      @unique
    name        String   @db.VarChar(40)
    medication  String?  @db.VarChar(80)
    description String   @db.VarChar(500)
    date        DateTime

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([petId])
}

model Vaccines {
    id              Int               @id @default(autoincrement())
    name            String            @db.VarChar(50)
    whenToTake      String            @db.VarChar(30)
    appliedVaccines AppliedVaccines[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model AppliedVaccines {
    id        Int      @id @default(autoincrement())
    date      DateTime
    pet       Pets     @relation(fields: [petId], references: [id])
    vaccine   Vaccines @relation(fields: [vaccineId], references: [id])
    petId     Int      @unique
    vaccineId Int      @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([petId, vaccineId])
}
